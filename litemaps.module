<?php

/**
 * Google Maps API JS file
 */
define('LITEMAPS_GOOGLE_MAPS_API_JS', 'http://maps.google.com/maps/api/js?sensor=false&libraries=places');

/**
 * Default width value for map
 */
define('LITEMAPS_DEFAULT_WIDTH', 500);

/**
 * Default height value for map
 */
define('LITEMAPS_DEFAULT_HEIGHT', 300);

/**
 * Default center value for map
 */
define('LITEMAPS_DEFAULT_CENTER', '');

/**
 * Default zoom for location picker
 */
define('LITEMAPS_DEFAULT_ZOOM', 'auto');

/**
 * Default type map value
 */
define('LITEMAPS_DEFAULT_TYPE', 'roadmap');

/**
 * Default static map value
 */
define('LITEMAPS_DEFAULT_STATICMAP', 0);


/**
 * Default status of debug mode
 */
define('LITEMAPS_DEBUG', 0);

/**
 * Add needed libraries.
 */
function litemaps_add_js() {
  drupal_add_js(variable_get('litemaps_google_maps_api_js', LITEMAPS_GOOGLE_MAPS_API_JS), array('type' => 'external'));

  $js_path = drupal_get_path('module', 'litemaps') . '/js';
  if (variable_get('litemaps_debug', LITEMAPS_DEBUG)) {
    drupal_add_js("$js_path/jquery.litemaps.js");
    drupal_add_js("$js_path/litemaps.js");
  }
  else {
    drupal_add_js("$js_path/jquery.litemaps.min.js");
    drupal_add_js("$js_path/litemaps.min.js");
  }
}

/**
 * Add JS settings for jQuery LiteMaps plugin
 * 
 * @param $settings
 *   Array to pass to jQuery LiteMaps
 */
function litemaps_add_js_settings($settings) {
  $added = &drupal_static(__FUNCTION__, array());
  
  if (isset($settings['map_id']) && isset($added[$settings['map_id']])) {
    return;
  }
  
  drupal_add_js(array('litemaps' => array($settings)), array('type' => 'setting', 'scope' => JS_DEFAULT));
  $added[$settings['map_id']] = $settings;
}

/**
 * Generate an unique map ID
 */
function litemaps_autoid() {
  $autoid = &drupal_static(__FUNCTION__, 0);
  return "litemaps-map-" . $autoid++;
}

/**
 * Implements hook_theme().
 */
function litemaps_theme() {
  return array(
    'litemaps' => array(
      'variables' => array('options' => NULL),
    ),
  );
}

/**
 * LiteMaps element theme hook.
 *
 * @return
 *   Rendered map
 */
function theme_litemaps($variables) {
  $options = $variables['options'];
  litemaps_add_js();
  
  if (! isset($options['map_id'])) {
    $options['map_id'] = litemaps_autoid();
  }

  litemaps_add_js_settings($options);
  
  return "<div id='" . $options['map_id'] . "'></div>";
}

/**
 * Implements hook_views_api().
 */
function litemaps_views_api() {
  return array('api' => 3.0);
}

/**
 * Implementation of hook_preprocess_views_view_litemaps().
 */
function template_preprocess_views_view_litemaps(&$vars) {
  if (! count($vars['rows']) || $vars['view']->editing) {
    return;
  }

  foreach ($vars['rows'] as $row_id => $row) {
    if (isset($vars['view']->litemaps)) {
      foreach ($vars['view']->litemaps->aliases as $alias) {
        $result = $vars['view']->result[$row_id];
        if (isset($result->{$alias['latitude']}) && isset($result->{$alias['longitude']})) {
          $vars['options']['map']['markers'][] = array(
            'lat' => $result->{$alias['latitude']},
            'lng' => $result->{$alias['longitude']},
            'content' => $row,
          );
        }
      }
    }
  }

  $vars['map'] = theme('litemaps', array('options' => $vars['options']['map']));
}

/**
 * Implements hook_field_info().
 */
function litemaps_field_info() {
  return array(
    'litemaps_point' => array(
      'label' => t('Map point'),
      'description' => t('This field stores map points in the database.'),
      'instance_settings' => array(),
      'default_widget' => 'litemaps_point_picker',
      'default_formatter' => 'litemaps_point_map',
    ),
  );
}

/**
 * Implements hook_field_validate().
 */
function litemaps_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if ($item['latitude'] != '' && $item['longitude'] != '') {
      if (! is_numeric($item['latitude']) || ! is_numeric($item['longitude']) ) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'litemaps_point_invalid',
          'message' => t('%name: the selected point is not valid.', array('%name' => $instance['label'])),
        );
        
        if (isset($item['js_settings']['markers'][0])) {
          $item['js_settings']['markers'][0] = array(
            'lat' => $item['js_settings']['markers'][0]['lat'],
            'lng' => $item['js_settings']['markers'][0]['lng'],
          );
        }
        else {
          unset($item['js_settings']['markers']);
          $item['js_settings']['zoom'] = 'auto';
          $item['js_settings']['center'] = 'auto';
        }
      }
      else {      
        // Add JS settings
        $item['js_settings']['markers'][0] = array(
          'lat' => $item['latitude'],
          'lng' => $item['longitude'],
        );
      }
      
      litemaps_add_js();
      litemaps_add_js_settings($item['js_settings']);
    }
  }
}

/**
 * Implements hook_field_widget_error().
 */
function litemaps_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element, $error['message']);
}

/**
 * Implements hook_field_is_empty().
 */
function litemaps_field_is_empty($item, $field) {
  if ($item['latitude'] == '' && $item['longitude'] == '') {
    return TRUE;
  }
  
  return FALSE;
}

/**
 * Implements hook_field_formatter_info().
 */
function litemaps_field_formatter_info() {
  return array(
    'litemaps_point_map' => array(
      'label' => t('Map points'),
      'field types' => array('litemaps_point'),
      'settings' =>  array(
        'height' => variable_get('litemaps_default_height', LITEMAPS_DEFAULT_HEIGHT),
        'width' => variable_get('litemaps_default_width', LITEMAPS_DEFAULT_WIDTH),
        'center' => variable_get('litemaps_default_center', LITEMAPS_DEFAULT_CENTER),
        'zoom' => variable_get('litemaps_default_zoom', LITEMAPS_DEFAULT_ZOOM),
        'type' => variable_get('litemaps_default_type', LITEMAPS_DEFAULT_TYPE),
        'staticmap' => variable_get('litemaps_default_staticmap', LITEMAPS_DEFAULT_STATICMAP),
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function litemaps_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  if ($display['type'] == 'litemaps_point_map') {
    $element['height'] = array(
      '#type' => 'textfield',
      '#title' => t('Map height'),
      '#description' => _litemaps_settings_description('height'),
      '#default_value' => $settings['height'],
    );
    
    $element['width'] = array(
      '#type' => 'textfield',
      '#title' => t('Map width'),
      '#description' => _litemaps_settings_description('width'),
      '#default_value' => $settings['width'],
    );
    
    $element['center'] = array(
      '#type' => 'textfield',
      '#title' => t('Map center'),
      '#description' => _litemaps_settings_description('center'),
      '#default_value' => $settings['center'],
    );
    
    $element['zoom'] = array(
      '#type' => 'select',
      '#title' => t('Map zoom'),
      '#description' => _litemaps_settings_description('zoom'),
      '#options' => _litemaps_settings_options_zoom(),
      '#default_value' => $settings['zoom'],
    );
    
    $element['type'] = array(
      '#type' => 'select',
      '#title' => t('Map type'),
      '#description' => _litemaps_settings_description('type'),
      '#options' => _litemaps_settings_options_type(),
      '#default_value' => $settings['type'],
    );
    
    $element['staticmap'] = array(
      '#type' => 'checkbox',
      '#title' => t('Static map'),
      '#description' => _litemaps_settings_description('staticmap'),
      '#default_value' => $settings['staticmap'],
    );
  }
 
  return $element;
}

/**
 * Return an array of allowed options for "zoom" parameter.
 */
function _litemaps_settings_options_zoom() {
  $options = array('auto' => t('Automatic'));
  $options += drupal_map_assoc(range(0, 22));
  
  return $options;
}

/**
 * Return an array of allowed options for "type" parameter.
 */
function _litemaps_settings_options_type() {
  return array(
    'roadmap' => t('Roadmap'),
    'satellite' => t('Satellite'),
    'hybrid' => t('Hybrid'),
    'terrain' => t('Terrain'),
  );
}

/**
 * Return the description text of given option.
 * 
 * @param $option
 *   Option name
 * @return
 *   Text with description 
 */
function _litemaps_settings_description($option) {
  $options = array(
    'height' => t('The height of map.'),
    'width' => t('The width of map.'),
    'center' => t('Position to center the map. Empty value for automatic.'),
    'zoom' => t('Level of zoom applied to map.'),
    'type' => t('Type of map to display.'),
    'staticmap' => t('Show a map image using Google Static Maps API.'),
  );
  
  return $options[$option];
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function litemaps_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();
  if ($display['type'] == 'litemaps_point_map') {
    $summary[] = t('Map height: @value', array('@value' => $settings['height']));
    $summary[] = t('Map width: @value', array('@value' => $settings['width'])) ;
    
    $summary[] = t('Map center: @value', array('@value' => (! empty($settings['center']) ? $settings['center'] : t('Automatic'))));
    
    $options = _litemaps_settings_options_zoom();
    $summary[] = t('Map zoom: @value', array('@value' => $options[$settings['zoom']]));
    
    $options = _litemaps_settings_options_type();
    $summary[] = t('Map type: @value', array('@value' => $options[$settings['type']]));
    
    $summary[] = t('Static map: @value', array('@value' => $settings['staticmap'] ? t('Yes') : t('No')));
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function litemaps_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $options = $display['settings'];

  switch ($display['type']) {
    case 'litemaps_point_map':
      foreach ($items as $delta => $item) {
        $options['markers'][] = array(
          'lat' => $item['latitude'],
          'lng' => $item['longitude'],
        );
      }

      $element[0] = array(
        '#theme' => 'litemaps',
        '#options' => $options,
      );
      break;
  }
  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function litemaps_field_widget_info() {
  return array(
    'litemaps_point_picker' => array(
      'label' => t('Map point picker'),
      'field types' => array('litemaps_point'),
      'settings' =>  array(
        'picker' => array(
          'height' => variable_get('litemaps_default_height', LITEMAPS_DEFAULT_HEIGHT),
          'width' => variable_get('litemaps_default_width', LITEMAPS_DEFAULT_WIDTH),
          'center' => variable_get('litemaps_default_center', LITEMAPS_DEFAULT_CENTER),
          'zoom' => variable_get('litemaps_default_zoom', LITEMAPS_DEFAULT_ZOOM),
          'type' => variable_get('litemaps_default_type', LITEMAPS_DEFAULT_TYPE),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function litemaps_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];

  if ($widget['type'] == 'litemaps_point_picker') {
    $settings = $widget['settings']['picker'];
    
    $form['picker'] = array(
      '#type' => 'fieldset',
      '#title' => t('Picker map'),
    );
    
    $form['picker']['height'] = array(
      '#type' => 'textfield',
      '#title' => t('Height'),
      '#description' => _litemaps_settings_description('height'),
      '#default_value' => $settings['height'],
    );
    
    $form['picker']['width'] = array(
      '#type' => 'textfield',
      '#title' => t('Width'),
      '#description' => _litemaps_settings_description('width'),
      '#default_value' => $settings['width'],
    );
    
    $form['picker']['center'] = array(
      '#type' => 'textfield',
      '#title' => t('Center'),
      '#description' => _litemaps_settings_description('center'),
      '#default_value' => $settings['center'],
    );
    
    $form['picker']['zoom'] = array(
      '#type' => 'select',
      '#title' => t('Zoom'),
      '#description' => _litemaps_settings_description('zoom'),
      '#options' => _litemaps_settings_options_zoom(),
      '#default_value' => $settings['zoom'],
    );
    
    $form['picker']['type'] = array(
      '#type' => 'select',
      '#title' => t('Type'),
      '#description' => _litemaps_settings_description('type'),
      '#options' => _litemaps_settings_options_type(),
      '#default_value' => $settings['type'],
    );
  }
  
  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function litemaps_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $base) {
  $element = $base;
  
  $element['#type'] = 'fieldset';
  
  $widget = $instance['widget'];
  
  if ($widget['type'] == 'litemaps_point_picker') {
    $settings = $widget['settings']['picker'];
    $latitude = isset($items[$delta]['latitude']) ? $items[$delta]['latitude'] : '';
    $longitude = isset($items[$delta]['longitude']) ? $items[$delta]['longitude'] : '';

    $js_settings = array(
     'picker' => TRUE,
     'zoom' => $settings['zoom'],
     'center' => $settings['center'],
     'width' => $settings['width'],
     'height' => $settings['height'],
     'type' => $settings['type'],
    );

    if ($latitude != '' && $longitude != '') {
      $js_settings['zoom'] = 'auto';
      $js_settings['markers'][0] = array(
        'lat' => $latitude,
        'lng' => $longitude,
      );
      $js_settings['center'] = 'auto';
    }

    $js_settings['map_id'] = litemaps_autoid();

    $element['js_settings'] = array(
      '#type' => 'value',
      '#value' => $js_settings,
    );

    $element['picker']['#markup'] = theme('litemaps', array('options' => $js_settings));

    $element['latitude'] = array(
      '#type' => 'textfield',
      '#title' => t('Latitude'),
      '#size' => 15,
      '#attributes' => array(
        'class' => array('litemaps_point_picker-latitude'),
      ),
      '#default_value' => $latitude,
    );

    $element['longitude'] = array(
      '#type' => 'textfield',
      '#title' => t('Longitude'),
      '#size' => 15,
      '#attributes' => array(
        'class' => array('litemaps_point_picker-longitude'),
      ),
      '#default_value' => $longitude,
    );
  }
  
  return $element;
}
