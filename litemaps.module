<?php

/**
 * Google Maps API JS file
 */
define('LITEMAPS_GOOGLE_MAPS_API_JS', 'http://maps.google.com/maps/api/js?sensor=false&libraries=places');

/**
 * Default width for location picker
 */
define('LITEMAPS_PICKER_WIDTH', 500);

/**
 * Default height for location picker
 */
define('LITEMAPS_PICKER_HEIGHT', 300);

/**
 * Default center for location picker
 */
define('LITEMAPS_PICKER_CENTER', 'auto');

/**
 * Default zoom for location picker
 */
define('LITEMAPS_PICKER_ZOOM', 5);

/**
 * Default status of debug mode
 */
define('LITEMAPS_DEBUG', 0);

/**
 * Get entity point of an entity.
 *
 * @param $entity Entity type. e. g. node, user, term
 * @param $eid Entity ID. nid for nodes, uid for users, tid for terms
 * @return An array with keys "latitude" and "longitude"
 */
function litemaps_get_point($entity, $eid) {
  return db_select('litemaps_points')
    ->fields('litemaps_points', array('latitude', 'longitude'))
    ->condition('entity', 'node')
    ->condition('eid', $eid)
    ->execute()
    ->fetchAssoc();
}

/**
 * Set point for entity. If latitude and longitude are not set, delete point.
 *
 * @param $entity Entity type. e. g. node, user, term
 * @param $eid Entity ID. nid for nodes, uid for users, tid for terms
 * @param $latitude Latitude
 * @param $longitude Longitude
 */
function litemaps_set_point($entity, $eid, $latitude = '', $longitude = '') {
  db_delete('litemaps_points')
    ->condition('entity', $entity)
    ->condition('eid', $eid)
    ->execute();

  if ($latitude != '' && $longitude != '') {
    $id = db_insert('litemaps_points')
      ->fields(array(
        'entity' => $entity,
        'eid' => $eid,
        'latitude' => $latitude,
        'longitude' => $longitude,
      ))
      ->execute();
  }
}

/**
 * Add needed libraries.
 */
function litemaps_add_js() {
  drupal_add_js(variable_get('litemaps_google_maps_api_js', LITEMAPS_GOOGLE_MAPS_API_JS), array('type' => 'external'));

  $js_path = drupal_get_path('module', 'litemaps') . '/js';
  if (variable_get('litemaps_debug', LITEMAPS_DEBUG)) {
    drupal_add_js("$js_path/jquery.litemaps.js");
    drupal_add_js("$js_path/litemaps.js");
  }
  else {
    drupal_add_js("$js_path/jquery.litemaps.min.js");
    drupal_add_js("$js_path/litemaps.min.js");
  }
}

/**
 * Generate an unique map ID
 */
function litemaps_autoid() {
  static $id = 0;
  return $id++;
}

/**
 * Implements hook_theme().
 */
function litemaps_theme() {
  return array(
    'litemaps' => array(
      'variables' => array('options' => NULL),
    ),
  );
}

/**
 * LiteMaps element theme hook.
 *
 * @param string $width Width of rendered map. You can specify 'px' or '%'.
 * @param string $height Height of rendered map. You can specify 'px' or '%'.
 * @param array $markers An array with markers
 * @return void Rendered map
 */
function theme_litemaps($variables) {
  $options = $variables['options'];
  litemaps_add_js();

  $mapid = "litemaps-" . litemaps_autoid();

  drupal_add_js(array('litemaps' => array($mapid => $options)), array('type' => 'setting', 'scope' => JS_DEFAULT));
  return "<div id='$mapid'></div>";
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function litemaps_form_node_type_form_alter(&$form, $form_state) {
  if (isset($form['type'])) {
    litemaps_add_js();
    $form['litemaps'] = array(
      '#type' => 'fieldset',
      '#title' => t('LiteMaps'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'additional_settings',
      '#attributes' => array(
        'class' => array('litemaps-node-type-settings-form'),
      ),
    );

    $form['litemaps']['litemaps_picker'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show location picker in node form'),
      '#default_value' => variable_get('litemaps_picker_' . $form['#node_type']->type, 0),
    );
  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function litemaps_form_node_form_alter(&$form, $form_state) {
  if (variable_get('litemaps_picker_' . $form['#node']->type, 0)) {
    $form = litemaps_form_node_after_build($form, $form_state);
    $form['#after_build'][] = 'litemaps_form_node_after_build';
  }
}

/**
 * After build callback for node form. This is required because
 * hook_form_alter() does not work after a fail validation.
 */
function litemaps_form_node_after_build($form, $form_state) {
  $node = $form['#node'];

  $latitude = '';
  $longitude = '';

  if (isset($form_state['values']) && isset($form_state['values']['litemaps'])
     && $form_state['values']['litemaps']['latitude'] != ''
     && $form_state['values']['litemaps']['longitude'] != '') {

    $latitude = $form_state['values']['litemaps']['latitude'];
    $longitude = $form_state['values']['litemaps']['longitude'];

  }
  elseif (! empty($node->nid)) {
    $latitude = $node->litemaps['latitude'];
    $longitude = $node->litemaps['longitude'];
  }

  if (! isset($form['litemaps'])) {
    $form['litemaps'] = array(
      '#tree' => TRUE,
    );

    $form['litemaps']['latitude'] = array(
      '#type' => 'hidden',
      '#default_value' => $latitude,
    );

    $form['litemaps']['longitude'] = array(
      '#type' => 'hidden',
      '#default_value' => $longitude,
    );
  }

  $options = array(
    'picker' => TRUE,
    'zoom' => variable_get('litemaps_picker_zoom', LITEMAPS_PICKER_ZOOM),
    'center' => variable_get('litemaps_picker_center', LITEMAPS_PICKER_CENTER),
    'width' => variable_get('litemaps_picker_width', LITEMAPS_PICKER_WIDTH),
    'height' => variable_get('litemaps_picker_height', LITEMAPS_PICKER_HEIGHT),
  );

  if ($latitude != '' && $longitude != '') {
    $options['zoom'] = 'auto';
    $options['markers'][] = array(
      'lat' => $latitude,
      'lng' => $longitude,
    );
    $options['center'] = 'auto';
  }

  $form['litemaps']['picker']['#markup'] = theme('litemaps', array('options' => $options));
  
  return $form;
}

/**
 * Set point on node insert/update.
 * @param $node Node object
 */
function _litemaps_node_set_point($node) {
  if (variable_get('litemaps_picker_' . $node->type, 0)) {
    litemaps_set_point('node', $node->nid, $node->litemaps['latitude'], $node->litemaps['longitude']);
  }
}

/**
 * Implements hook_node_insert().
 */
function litemaps_node_insert($node) {
  _litemaps_node_set_point($node);
}

/**
 * Implements hook_node_update().
 */
function litemaps_node_update($node) {
  _litemaps_node_set_point($node);
}

/**
 * Implements hook_node_delete().
 */
function litemaps_node_delete($node) {
  if (variable_get('litemaps_picker_' . $node->type, 0)) {
    litemaps_set_point('node', $node->nid);
  }
}

/**
 * Implements hook_node_load().
 */
function litemaps_node_load($nodes, $types) {
  foreach ($nodes as $node) {
    if (variable_get('litemaps_picker_' . $node->type, 0)) {
      $node->litemaps = litemaps_get_point('node', $node->nid);
    }
  }
}

/**
 * Implements hook_views_api().
 */
function litemaps_views_api() {
  return array('api' => 3.0);
}

/**
 * Implementation of hook_preprocess_views_view_litemaps().
 */
function template_preprocess_views_view_litemaps(&$vars) {
  if (! count($vars['rows']) || $vars['view']->editing) {
    return;
  }

  $vars['options'] += array(
    'height' => NULL,
    'width' => NULL,
    'staticmap' => NULL,
    'zoom' => NULL,
  );
  if ($vars['options']['height']) {
    $options['height'] = $vars['options']['height'];
  }
  if ($vars['options']['width']) {
    $options['width'] = $vars['options']['width'];
  }

  if ($vars['options']['staticmap']) {
    $options['staticmap'] = TRUE;
  }

  if ($vars['options']['zoom']) {
    $options['zoom'] = $vars['options']['zoom'];
  }

  $alias_latitude = $vars['view']->litemaps->alias_latitude;
  $alias_longitude = $vars['view']->litemaps->alias_longitude;
  foreach ($vars['rows'] as $row_id => $row) {
    $latitude = $vars['view']->result[$row_id]->{$alias_latitude};
    $longitude = $vars['view']->result[$row_id]->{$alias_longitude};
    $options['markers'][] = array(
      'lat' => $latitude,
      'lng' => $longitude,
      'content' => $row,
    );
  }

  $vars['map'] = theme('litemaps', array('options' => $options));
}
